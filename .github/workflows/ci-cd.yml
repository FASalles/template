name: CI/CD Pipeline

# Dispara o workflow em eventos específicos
on:
  push: # Quando houver commits no branch "main"
    branches:
      - main
  pull_request: # Para garantir que o código em PRs está correto
    branches:
      - main

jobs:
  # Etapa 1: Configurar o ambiente
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest # Máquina virtual usada para o workflow
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 # Clona o repositório para o runner

      - name: Set up PHP
        uses: shivammathur/setup-php@v2 # Instala o PHP
        with:
          php-version: '8.1' # Versão do PHP
          tools: composer, phpstan # Instala Composer e PHPStan
          extensions: mbstring, pdo, bcmath, zip # Extensões necessárias
          ini-values: post_max_size=256M, upload_max_filesize=256M # Config PHP

      - name: Install Node.js
        uses: actions/setup-node@v3 # Configura o Node.js
        with:
          node-version: '18' # Versão do Node.js

  # Etapa 2: Instalar dependências
  dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: setup # Executa após o job "setup"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install PHP Dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Install Node.js Dependencies
        run: npm ci # Instala dependências definidas no package-lock.json

      - name: Compile Frontend Assets
        run: npm run production # Compila os assets (usando Laravel Mix, por exemplo)

  # Etapa 3: Análise Estática
  lint:
    name: Code Analysis
    runs-on: ubuntu-latest
    needs: dependencies
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: PHPStan Analysis
        run: vendor/bin/phpstan analyse --memory-limit=1G # Análise do PHPStan

  # Etapa 4: Testes Automatizados
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: dependencies
    services:
      mysql: # Configuração do banco de dados MySQL para testes
        image: mysql:8.0 # Versão do MySQL
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run PHPUnit Tests
        env: # Variáveis de ambiente para configurar a conexão com o MySQL
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testdb
          DB_USERNAME: root
          DB_PASSWORD: root
        run: php artisan test # Executa os testes do Laravel com PHPUnit

      - name: Run Laravel Dusk Tests
        env: # Configura o ambiente para testes de interface
          APP_URL: http://127.0.0.1:8000
        run: |
          php artisan serve & # Inicia o servidor local
          vendor/bin/phpunit --testsuite=Dusk # Executa os testes Dusk

  # Etapa 5: Deploy
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Deploy to Server
        run: echo "Configurar deploy aqui (rsync, scp, etc)."
